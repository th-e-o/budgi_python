# app.py - Simplified version with welcome message
import streamlit as st
import asyncio
from pathlib import Path
from datetime import datetime
import logging
import openpyxl
import tempfile
import contextlib
import os
import pandas as pd
from modules.excel_parser.parser_v3 import ExcelFormulaParser, ParserConfig, FormulaCell
from modules.budget_mapper import BudgetMapper
from typing import List

# Configuration de la page
st.set_page_config(
    page_title="BudgiBot - Assistant Budg√©taire",
    page_icon="",
    layout="wide",
    initial_sidebar_state="collapsed",  # Pas de sidebar
    menu_items={
        'Get Help': None,
        'Report a bug': None,
        'About': None
    }
)

# Import des modules
from core.llm_client import MistralClient
from core.file_handler import FileHandler
from core.chat_handler import ChatHandler
from core.excel_handler import ExcelHandler
from modules.budget_extractor import BudgetExtractor
from modules.bpss_tool import BPSSTool
from modules.json_helper import JSONHelper
from config import config

# Import des composants UI
from ui import get_main_styles, get_javascript, MainLayout

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Injection des styles CSS et JavaScript
st.markdown(get_main_styles(), unsafe_allow_html=True)
st.markdown(get_javascript(), unsafe_allow_html=True)
# CSS additionnel pour forcer la suppression des marges Streamlit
st.markdown("""
<style>
    /* Force removal of Streamlit default spacing */
    .main > div {
        padding-top: 0rem !important;
        padding-bottom: 0rem !important;
        padding-left: 1rem !important;
        padding-right: 1rem !important;
    }
    
    /* Remove header space */
    header[data-testid="stHeader"] {
        display: none !important;
    }
    
    /* Block container */
    .block-container {
        padding-top: 1rem !important;
        padding-bottom: 0rem !important;
        max-width: 100% !important;
    }
    
    /* First element fix */
    .element-container:first-child {
        margin-top: 0 !important;
    }
    
    /* Hide Streamlit menu */
    button[kind="header"] {
        display: none !important;
    }
    
    /* App container */
    .stApp {
        margin: 0 !important;
        padding: 0 !important;
    }
    
    /* Remove excessive gaps */
    div[data-testid="stVerticalBlock"] > div:not([style*="height"]) {
        gap: 0.5rem !important;
    }
    
    /* Container height fix */
    div[data-testid="stVerticalBlock"] > div[style*="height"] {
        overflow-y: auto !important;
    }
</style>
""", unsafe_allow_html=True)

# Context manager pour fichiers temporaires
@contextlib.contextmanager
def temporary_file(content, suffix=''):
    """Context manager pour fichiers temporaires"""
    fd, path = tempfile.mkstemp(suffix=suffix)
    try:
        with os.fdopen(fd, 'wb') as f:
            if isinstance(content, bytes):
                f.write(content)
            else:
                f.write(content.encode() if hasattr(content, 'encode') else bytes(content))
        yield path
    finally:
        try:
            os.unlink(path)
        except:
            pass

# Initialisation des services
@st.cache_resource
def init_services():
    """Initialise tous les services n√©cessaires"""
    services = {
        'llm_client': MistralClient(),
        'file_handler': FileHandler(),
        'chat_handler': ChatHandler(),
        'excel_handler': ExcelHandler(),
        'budget_extractor': BudgetExtractor(),
        'bpss_tool': BPSSTool(),
        'json_helper': JSONHelper(),
        'budget_mapper': BudgetMapper(MistralClient())
    }
    
    # Nettoyage automatique des fichiers temporaires
    import atexit
    atexit.register(lambda: services['excel_handler'].cleanup_temp_files())
    
    return services

# Message de bienvenue
WELCOME_MESSAGE = """Bonjour, 
je peux vous aider √† :
‚Ä¢ **Analyser vos fichiers Excel** - Chargez un fichier .xlsx pour commencer
‚Ä¢ **Extraire des donn√©es budg√©taires** - √Ä partir de PDF, Word, emails ou textes
‚Ä¢ **Utiliser l'outil BPSS** - Pour traiter vos fichiers PP-E-S, DPP18 et BUD45
"""

def init_session_state():
    """Initialise l'√©tat de session"""
    defaults = {
        'chat_history': [],
        'current_file': None,
        'excel_workbook': None,
        'extracted_data': None,
        'is_typing': False,
        'pending_action': None,
        'json_data': None,
        'parsed_formulas': None,
        'message_input_key': 0,
        'processed_files': set(),
        'temp_files': [],
        'layout_mode': 'chat',
        'mapping_report': None,  
        'excel_tab': 'data',  # Ajouter pour g√©rer l'onglet actif
        'pending_mapping': None,       # Mapping en attente de validation
        'mapping_validated': False,    # Flag indiquant si le mapping a √©t√© appliqu√©
    }
    
    # Initialiser les valeurs par d√©faut
    for key, default_value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = default_value
    
    # Ajouter le message de bienvenue si premi√®re fois
    if not st.session_state.chat_history:
        st.session_state.chat_history.append({
            'role': 'assistant',
            'content': WELCOME_MESSAGE,
            'timestamp': datetime.now().strftime("%H:%M"),
            'type': 'welcome'
        })

def cleanup_temp_files():
    """Nettoie les fichiers temporaires"""
    for temp_file in st.session_state.get('temp_files', []):
        try:
            if os.path.exists(temp_file):
                os.unlink(temp_file)
                logger.info(f"Fichier temporaire supprim√©: {temp_file}")
        except Exception as e:
            logger.warning(f"Impossible de supprimer {temp_file}: {str(e)}")
    st.session_state.temp_files = []

# Gestionnaires d'√©v√©nements
async def handle_message_send(message: str):
    """G√®re l'envoi d'un message"""
    # Ajouter le message utilisateur
    st.session_state.chat_history.append({
        'role': 'user',
        'content': message,
        'timestamp': datetime.now().strftime("%H:%M")
    })
    
    # Activer l'indicateur de frappe
    st.session_state.is_typing = True
    st.rerun()

async def process_message():
    """Traite le message avec le LLM"""
    try:
        # Pr√©parer les messages pour l'API
        api_messages = services['chat_handler'].filter_messages_for_api(
            st.session_state.chat_history
        )
        
        # Obtenir la r√©ponse
        response = await services['llm_client'].chat(api_messages)
        
        if response:
            # Ajouter la r√©ponse
            st.session_state.chat_history.append({
                'role': 'assistant',
                'content': response,
                'timestamp': datetime.now().strftime("%H:%M")
            })
            
                
    except Exception as e:
        logger.error(f"Erreur traitement message: {str(e)}")
        st.session_state.chat_history.append({
            'role': 'assistant',
            'content': "‚ùå D√©sol√©, une erreur s'est produite. Pouvez-vous reformuler ?",
            'timestamp': datetime.now().strftime("%H:%M"),
            'error': True
        })
    
    st.session_state.is_typing = False
    st.rerun()

async def handle_file_upload(uploaded_file):
    """G√®re l'upload d'un fichier"""
    # √âviter les doublons
    file_key = f"{uploaded_file.name}_{uploaded_file.size}"
    if file_key in st.session_state.processed_files:
        return
    
    st.session_state.processed_files.add(file_key)
    
    # Ajouter le message d'upload
    st.session_state.chat_history.append({
        'role': 'user',
        'content': f"üìé Fichier envoy√© : {uploaded_file.name}",
        'timestamp': datetime.now().strftime("%H:%M"),
        'file_name': uploaded_file.name,
        'file_size': uploaded_file.size,
        'file_key': file_key
    })
    
    st.session_state.is_typing = True
    st.rerun()

async def process_file(uploaded_file):
    """Traite le fichier upload√©"""
    try:
        file_content = uploaded_file.getbuffer()
        suffix = Path(uploaded_file.name).suffix
        
        with temporary_file(file_content, suffix=suffix) as temp_path:
            # Lire le contenu
            content = services['file_handler'].read_file(temp_path, uploaded_file.name)
            
            # Stocker les informations
            st.session_state.current_file = {
                'name': uploaded_file.name,
                'content': content,
                'type': suffix[1:].lower(),
                'raw_bytes': file_content,
                'size': uploaded_file.size
            }
            
            # Stocker le contenu (cach√©)
            st.session_state.chat_history.append({
                'role': 'system',
                'content': content,
                'meta': 'file_content',
                'file_name': uploaded_file.name,
                'timestamp': datetime.now().strftime("%H:%M")
            })
            
            # Traitement sp√©cifique
            if uploaded_file.name.endswith('.xlsx'):
                st.session_state.excel_workbook = services['excel_handler'].load_workbook_from_bytes(
                    file_content
                )
                st.session_state.layout_mode = 'split'  # Vue partag√©e pour Excel
                
                response = f"‚úÖ J'ai charg√© votre fichier Excel '{uploaded_file.name}'. Il contient {len(st.session_state.excel_workbook.sheetnames)} feuilles. Vous pouvez maintenant :\n\n‚Ä¢ Visualiser et √©diter les donn√©es dans l'onglet Excel\n‚Ä¢ Extraire les donn√©es budg√©taires\n‚Ä¢ Utiliser l'outil BPSS pour les mesures cat√©gorielles"
                
            elif uploaded_file.name.endswith('.json'):
                import json
                st.session_state.json_data = json.loads(content)
                response = f"‚úÖ Fichier JSON de configuration charg√©. Il contient {len(st.session_state.json_data.get('tags', []))} tags pour le mapping automatique."
                
            else:
                # R√©sum√© pour autres types
                preview = content[:200] + "..." if len(content) > 200 else content
                response = f"‚úÖ J'ai bien re√ßu votre fichier '{uploaded_file.name}'. Voici un aper√ßu :\n\n{preview}\n\nQue souhaitez-vous faire avec ce fichier ?"
            
            # Ajouter la r√©ponse
            st.session_state.chat_history.append({
                'role': 'assistant',
                'content': response,
                'timestamp': datetime.now().strftime("%H:%M")
            })
        
    except Exception as e:
        logger.error(f"Erreur traitement fichier: {str(e)}")
        st.session_state.chat_history.append({
            'role': 'assistant',
            'content': f"‚ùå Erreur lors du traitement : {str(e)}",
            'timestamp': datetime.now().strftime("%H:%M"),
            'error': True
        })
    
    st.session_state.is_typing = False
    st.rerun()

def handle_tool_action(action: dict):
    """G√®re les actions des outils"""
    action_type = action.get('action')
    
    if action_type == 'clear_history':
        # R√©initialiser la conversation
        st.session_state.chat_history = [{
            'role': 'assistant',
            'content': WELCOME_MESSAGE,
            'timestamp': datetime.now().strftime("%H:%M"),
            'type': 'welcome'
        }]
        st.session_state.processed_files = set()
        st.session_state.current_file = None
        st.session_state.excel_workbook = None
        st.session_state.extracted_data = None
        cleanup_temp_files()
        st.success("‚ú® Conversation r√©initialis√©e")
        
    elif action_type == 'extract_budget':
        asyncio.run(extract_budget_data())
        
    elif action_type == 'process_bpss':
        asyncio.run(process_bpss(action.get('data')))
        
    elif action_type == 'parse_excel':
        parse_excel_formulas()
        
    elif action_type == 'map_budget_cells':
        asyncio.run(map_budget_to_cells())
        
    elif action_type == 'apply_formulas':
        apply_excel_formulas()
    
    elif action_type == 'apply_validated_mapping':
        asyncio.run(apply_validated_mapping())

async def extract_budget_data():
    """Extrait les donn√©es budg√©taires"""
    if not st.session_state.current_file:
        st.error("‚ùå Aucun fichier charg√©")
        return
    
    with st.spinner("Extraction en cours..."):
        try:
            content = st.session_state.current_file['content']
            file_name = st.session_state.current_file['name']
            
            # Limiter la taille
            if len(content) > 10000:
                content = content[:10000] + "\n\n[... contenu tronqu√© ...]"
            
            # Extraire
            data = await services['budget_extractor'].extract(
                content, 
                services['llm_client']
            )
            
            if data:
                st.session_state.extracted_data = data
                st.session_state.excel_tab = 'analysis'
                
                # Message de succ√®s
                st.session_state.chat_history.append({
                    'role': 'assistant',
                    'content': f"‚úÖ J'ai extrait **{len(data)} entr√©es budg√©taires** du fichier '{file_name}'.\n\nRendez-vous dans l'onglet 'Extraction' pour visualiser et √©diter les donn√©es.",
                    'timestamp': datetime.now().strftime("%H:%M")
                })
                st.success(f"‚úÖ {len(data)} entr√©es extraites!")
            else:
                st.warning("‚ö†Ô∏è Aucune donn√©e budg√©taire trouv√©e")
                
        except Exception as e:
            logger.error(f"Erreur extraction: {str(e)}")
            st.error(f"‚ùå Erreur: {str(e)}")

async def process_bpss(data: dict):
    """Traite les fichiers BPSS"""
    try:
        progress = st.progress(0, text="Traitement BPSS...")
        
        # Cr√©er des fichiers temporaires SANS les supprimer automatiquement
        import tempfile
        import os
        
        temp_files = []
        temp_paths = {}
        
        try:
            # Sauvegarder les fichiers temporairement
            for key, file in data['files'].items():
                # Cr√©er un fichier temporaire
                fd, temp_path = tempfile.mkstemp(suffix='.xlsx')
                temp_files.append(temp_path)  # Garder la trace pour nettoyage
                
                # √âcrire le contenu
                with os.fdopen(fd, 'wb') as tmp:
                    tmp.write(file.getbuffer())
                
                temp_paths[key] = temp_path
                logger.info(f"Fichier temporaire cr√©√©: {key} -> {temp_path}")
            
            progress.progress(50, text="Application des donn√©es...")
            
            # Traiter avec les fichiers temporaires
            result_wb = services['bpss_tool'].process_files(
                ppes_path=temp_paths['ppes'],
                dpp18_path=temp_paths['dpp18'],
                bud45_path=temp_paths['bud45'],
                year=data['year'],
                ministry_code=data['ministry'],
                program_code=data['program'],
                target_workbook=st.session_state.excel_workbook or openpyxl.Workbook()
            )
            
            st.session_state.excel_workbook = result_wb
            progress.progress(100, text="Termin√©!")
            
            # Message de succ√®s
            st.session_state.chat_history.append({
                'role': 'assistant',
                'content': f"‚úÖ Traitement BPSS termin√©!\n\nJ'ai int√©gr√© les donn√©es pour:\n‚Ä¢ Ann√©e: {data['year']}\n‚Ä¢ Minist√®re: {data['ministry']}\n‚Ä¢ Programme: {data['program']}\n\nLes feuilles ont √©t√© ajout√©es √† votre fichier Excel.",
                'timestamp': datetime.now().strftime("%H:%M")
            })
            
            st.success("‚úÖ Traitement BPSS r√©ussi!")

            # IMPORTANT : Forcer le rechargement
            st.session_state.excel_workbook = result_wb

            # Sauvegarder temporairement pour l'affichage des valeurs
            with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as tmp:
                result_wb.save(tmp.name)
                services['excel_handler'].current_path = tmp.name
                temp_files.append(tmp.name)

            # Message de succ√®s avec d√©tails
            st.success(f"""
            ‚úÖ Traitement BPSS termin√©!
            - Ann√©e: {data['year']}
            - Minist√®re: {data['ministry']}
            - Programme: {data['program']}

            Feuilles ajout√©es: Donn√©es PP-E-S, INF DPP 18, INF BUD 45
            """)

            # Basculer vers l'onglet Excel
            st.session_state.layout_mode = 'excel'

            # FORCER LE RAFRA√éCHISSEMENT
            st.rerun()
            
        finally:
            # Nettoyer les fichiers temporaires
            for temp_file in temp_files:
                try:
                    if os.path.exists(temp_file):
                        os.unlink(temp_file)
                        logger.info(f"Fichier temporaire supprim√©: {temp_file}")
                except Exception as e:
                    logger.warning(f"Impossible de supprimer {temp_file}: {str(e)}")
        
    except Exception as e:
        logger.error(f"Erreur BPSS: {str(e)}")
        st.error(f"‚ùå Erreur: {str(e)}")

def parse_excel_formulas():
    """Parse les formules Excel avec le parseur Python am√©lior√©"""
    if not st.session_state.current_file:
        st.error("‚ùå Aucun fichier Excel charg√©")
        return
    
    with st.spinner("Analyse des formules Excel..."):
        try:
            # Configuration du parseur
            parser_config = ParserConfig(
                chunk_size=800,
                workers=4,
                progress_enabled=True
            )
            
            # Cr√©er une instance du parseur
            parser = ExcelFormulaParser(parser_config)
            
            # Sauvegarder temporairement le fichier
            with temporary_file(st.session_state.current_file['raw_bytes'], suffix='.xlsx') as path:
                # Parser le fichier
                result = parser.parse_excel_file(path, emit_script=True)
                
                st.session_state.parsed_formulas = result
                stats = result['statistics']
                
                # Afficher les r√©sultats
                if stats['success'] > 0:
                    st.success(f"‚úÖ {stats['success']}/{stats['total']} formules converties avec succ√®s")
                    
                    # Ajouter un message dans le chat
                    st.session_state.chat_history.append({
                        'role': 'assistant',
                        'content': f"‚úÖ J'ai analys√© **{stats['total']} formules Excel** dans votre fichier.\n\n"
                                 f"‚Ä¢ **{stats['success']}** formules converties avec succ√®s ({stats['success_rate']}%)\n"
                                 f"‚Ä¢ **{stats['errors']}** formules avec erreurs\n\n"
                                 f"Un script Python a √©t√© g√©n√©r√© pour appliquer ces formules.",
                        'timestamp': datetime.now().strftime("%H:%M")
                    })
                    
                    # Activer le bouton d'application si succ√®s
                    if result.get('script_file'):
                        st.session_state.formula_script_ready = True
                else:
                    st.warning(f"‚ö†Ô∏è Aucune formule n'a pu √™tre convertie sur {stats['total']} trouv√©es")
                
        except Exception as e:
            logger.error(f"Erreur parsing: {str(e)}")
            st.error(f"‚ùå Erreur: {str(e)}")

def apply_excel_formulas():
    """Applique les formules pars√©es au workbook avec debug am√©lior√©"""
    if not st.session_state.get('parsed_formulas'):
        st.error("‚ùå Aucune formule pars√©e. Lancez d'abord le parsing.")
        return
    
    if not st.session_state.get('excel_workbook'):
        st.error("‚ùå Aucun fichier Excel charg√©")
        return
    
    with st.spinner("Application des formules en cours..."):
        try:
            # R√©cup√©rer les formules pars√©es
            parsed_data = st.session_state.parsed_formulas
            formulas = parsed_data.get('formulas', [])
            
            if not formulas:
                st.warning("‚ö†Ô∏è Aucune formule √† appliquer")
                return
            
            # Cr√©er une instance du parseur
            parser_config = ParserConfig(
                chunk_size=800,
                workers=4,
                progress_enabled=True
            )
            parser = ExcelFormulaParser(parser_config)
            
            # Afficher les informations de debug si activ√©
            if st.session_state.get('debug_mode', False):
                st.info(f"üîç Mode debug: Application de {len(formulas)} formules")
                
                # Afficher un √©chantillon du code g√©n√©r√©
                sample_formulas = [f for f in formulas[:5] if f.python_code and not f.error]
                if sample_formulas:
                    with st.expander("Exemples de code Python g√©n√©r√©"):
                        for f in sample_formulas:
                            st.code(f"{f.sheet}!{f.address}: {f.python_code}", language="python")
            
            # Appliquer les formules au workbook
            updated_wb = parser.apply_formulas_to_workbook(
                st.session_state.excel_workbook,
                formulas
            )
            
            # Mettre √† jour le workbook en session
            st.session_state.excel_workbook = updated_wb
            
            # Sauvegarder temporairement pour l'affichage des valeurs
            import tempfile
            with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as tmp:
                updated_wb.save(tmp.name)
                services['excel_handler'].current_path = tmp.name
                st.session_state.temp_files.append(tmp.name)
            
            # Analyser les r√©sultats
            success_count = sum(1 for f in formulas if f.value is not None and not f.error)
            error_count = sum(1 for f in formulas if f.error)
            
            # Afficher les r√©sultats d√©taill√©s
            col1, col2 = st.columns(2)
            with col1:
                st.metric("‚úÖ Succ√®s", success_count)
            with col2:
                st.metric("‚ùå Erreurs", error_count)
            
            # Message de succ√®s
            if success_count > 0:
                st.success(f"‚úÖ {success_count} formules appliqu√©es avec succ√®s!")
                
                # Ajouter un message dans le chat
                st.session_state.chat_history.append({
                    'role': 'assistant',
                    'content': f"‚úÖ J'ai appliqu√© **{success_count} formules** dans votre fichier Excel.\n\n"
                             f"‚Ä¢ **{success_count}** calculs r√©ussis\n"
                             f"‚Ä¢ **{error_count}** erreurs\n\n"
                             f"Basculez en mode 'Valeurs' pour voir les r√©sultats calcul√©s.",
                    'timestamp': datetime.now().strftime("%H:%M")
                })
            
            # Gestion d√©taill√©e des erreurs
            if error_count > 0:
                st.warning(f"‚ö†Ô∏è {error_count} formules n'ont pas pu √™tre calcul√©es")
                
                # Grouper les erreurs par type
                error_types = {}
                if st.session_state.get('formula_errors'):
                    for err in st.session_state.formula_errors:
                        error_msg = err['error']
                        # Extraire le type d'erreur
                        if "can only concatenate str" in error_msg:
                            error_type = "Erreur de type (string/nombre)"
                        elif "unsupported operand type" in error_msg:
                            error_type = "Op√©ration impossible (types incompatibles)"
                        elif "NoneType" in error_msg:
                            error_type = "Valeur manquante (None)"
                        else:
                            error_type = "Autre erreur"
                        
                        if error_type not in error_types:
                            error_types[error_type] = []
                        error_types[error_type].append(err)
                
                # Afficher les erreurs group√©es
                st.markdown("### üìã D√©tails des erreurs")
                for error_type, errors in error_types.items():
                    st.markdown(f"**{error_type}** ({len(errors)} erreurs)")
                    
                    # Afficher quelques exemples
                    for err in errors[:3]:
                        st.error(f"**{err['cell']}**: {err['formula']}")
                        st.caption(f"Erreur: {err['error'][:100]}...")
                        if st.session_state.get('debug_mode'):
                            st.code(f"Code g√©n√©r√©: {err.get('python_code', 'N/A')}", language="python")
                    
                    if len(errors) > 3:
                        st.caption(f"... et {len(errors) - 3} autres erreurs de ce type")
                
                
                # Suggestions de correction
                st.info("""
                üí° **Suggestions pour corriger les erreurs** :
                
                1. **Erreurs de type** : V√©rifiez que les cellules contiennent bien des nombres
                2. **Valeurs manquantes** : Remplacez les cellules vides par 0
                3. **Formules complexes** : Simplifiez les formules ou d√©composez-les
                
                Vous pouvez √©diter les donn√©es dans l'onglet "Donn√©es" puis relancer le calcul.
                """)
            
            # Forcer le rafra√Æchissement
            st.rerun()
            
        except Exception as e:
            logger.error(f"Erreur application formules: {str(e)}")
            st.error(f"‚ùå Erreur lors de l'application: {str(e)}")
            
            # En mode debug, afficher la trace compl√®te
            if st.session_state.get('debug_mode'):
                import traceback
                st.code(traceback.format_exc(), language="python")

async def map_budget_to_cells():
    """Mappe les donn√©es aux cellules Excel avec gestion du rapport"""
    if not st.session_state.get('extracted_data') or not st.session_state.get('json_data'):
        st.error("‚ùå Donn√©es manquantes pour le mapping")
        return
    
    with st.spinner("Mapping en cours..."):
        try:
            mapper = services['budget_mapper']
            tags = services['json_helper'].get_tags_for_mapping(st.session_state.json_data)
            
            # Cr√©er une barre de progression
            progress_bar = st.progress(0)
            progress_text = st.empty()
            
            def update_progress(percent, text):
                progress_bar.progress(int(percent))
                progress_text.text(text)
            
            # Mapper avec callback de progression
            mapping = await mapper.map_entries_to_cells(
                st.session_state.extracted_data,
                tags,
                progress_callback=update_progress
            )
            
            # Nettoyer la barre de progression
            progress_bar.empty()
            progress_text.empty()
            
            if mapping and st.session_state.excel_workbook:
                # Enrichir les entr√©es avec le mapping
                entries_df = pd.DataFrame(st.session_state.extracted_data)
                enriched_df = mapper.enrich_entries_with_mapping(entries_df, mapping)
                
                # Mettre √† jour les donn√©es extraites enrichies
                st.session_state.extracted_data = enriched_df.to_dict('records')
                st.session_state.pending_mapping = mapping  # stocker le mapping en attente
                st.session_state.mapping_validated = False  # flag de validation
                
                # G√©n√©rer le rapport de mapping
                report = mapper.generate_mapping_report(mapping, entries_df)
                st.session_state.mapping_report = report
                
                # Appliquer au workbook
                success, errors = mapper.apply_mapping_to_excel(
                    st.session_state.excel_workbook,
                    mapping,
                    entries_df
                )
                
                # Afficher les r√©sultats
                if success > 0:
                    # Message de succ√®s simple
                    st.success(f"""
                    ‚úÖ Mapping termin√© avec succ√®s!
                    
                    **R√©sultats:**
                    - {success} cellules mises √† jour
                    - {report['summary']['mapping_rate']:.1f}% de taux de mapping
                    - {report['summary']['average_confidence']:.1%} de confiance moyenne
                    
                    üëâ Consultez l'interface de v√©rification dans l'onglet Excel pour valider les mappings.
                    """)
                    
                    # Message dans le chat
                    st.session_state.chat_history.append({
                        'role': 'assistant',
                        'content': f"‚úÖ Mapping termin√©!\n\n‚Ä¢ **{success}** cellules mises √† jour\n‚Ä¢ **{report['summary']['mapping_rate']:.1f}%** de taux de mapping\n‚Ä¢ **{report['summary']['average_confidence']:.1%}** de confiance moyenne\n\nConsultez l'interface de v√©rification dans l'onglet Excel pour valider les mappings.",
                        'timestamp': datetime.now().strftime("%H:%M")
                    })
                    
                    # Basculer vers la vue Excel pour voir les r√©sultats
                    st.session_state.layout_mode = 'excel'
                    st.rerun()
                    
                if errors:
                    # Afficher les erreurs dans un expander
                    with st.expander("‚ö†Ô∏è Probl√®mes rencontr√©s", expanded=False):
                        for error in errors[:10]:  # Limiter √† 10 erreurs
                            st.warning(error)
                        if len(errors) > 10:
                            st.warning(f"... et {len(errors) - 10} autres probl√®mes")
            else:
                st.warning("‚ö†Ô∏è Aucun mapping n'a pu √™tre √©tabli")
                            
        except Exception as e:
            logger.error(f"Erreur mapping: {str(e)}")
            st.error(f"‚ùå Erreur lors du mapping: {str(e)}")

#Fonction pour appliquer le mapping valid√©
async def apply_validated_mapping():
    """Applique le mapping valid√© dans Excel"""
    if not st.session_state.get('pending_mapping') or not st.session_state.get('excel_workbook'):
        st.error("‚ùå Aucun mapping valid√© √† appliquer")
        return
    
    with st.spinner("Application du mapping dans Excel..."):
        try:
            mapper = services['budget_mapper']
            mapping = st.session_state.pending_mapping
            entries_df = pd.DataFrame(st.session_state.extracted_data)
            
            # Appliquer au workbook
            success_count, errors = mapper.apply_mapping_to_excel(
                st.session_state.excel_workbook,
                mapping,
                entries_df
            )
            
            if success_count > 0:
                st.success(f"‚úÖ {success_count} cellules mises √† jour dans Excel!")
                
                # Marquer comme appliqu√©
                st.session_state.mapping_validated = True
                st.session_state.pending_mapping = None
                
                # Message dans le chat
                st.session_state.chat_history.append({
                    'role': 'assistant',
                    'content': f"‚úÖ Mapping appliqu√© avec succ√®s!\n\n‚Ä¢ **{success_count}** cellules mises √† jour dans Excel\n‚Ä¢ Les montants ont √©t√© √©crits dans les cellules cibles\n\nVous pouvez maintenant t√©l√©charger le fichier Excel mis √† jour.",
                    'timestamp': datetime.now().strftime("%H:%M")
                })
                
                st.rerun()
            else:
                st.error("‚ùå Aucune cellule n'a pu √™tre mise √† jour")
                
            if errors:
                with st.expander("‚ö†Ô∏è Probl√®mes rencontr√©s"):
                    for error in errors[:10]:
                        st.warning(error)
                        
        except Exception as e:
            logger.error(f"Erreur application mapping: {str(e)}")
            st.error(f"‚ùå Erreur: {str(e)}")

# Initialisation des services
services = init_services()

def main():
    """Fonction principale"""
    # Initialiser l'√©tat
    init_session_state()
    
    # Nettoyer au d√©marrage
    if 'startup_cleanup' not in st.session_state:
        cleanup_temp_files()
        st.session_state.startup_cleanup = True
    
    # Traiter les messages/fichiers en attente
    if st.session_state.is_typing and st.session_state.chat_history:
        last_msg = st.session_state.chat_history[-1]
        
        if last_msg['role'] == 'user':
            if last_msg['content'].startswith("üìé"):
                # Fichier √† traiter
                file_key = last_msg.get('file_key')
                if file_key:
                    # Chercher le fichier dans les widgets
                    for widget_key in st.session_state:
                        if widget_key.startswith('file_upload_'):
                            file = st.session_state.get(widget_key)
                            if file and f"{file.name}_{file.size}" == file_key:
                                asyncio.run(process_file(file))
                                break
            else:
                # Message texte
                asyncio.run(process_message())
    
    # Traiter les actions en attente
    if st.session_state.get('pending_action'):
        action = st.session_state.pending_action
        st.session_state.pending_action = None
        
        if action['type'] == 'extract_budget':
            asyncio.run(extract_budget_data())
    
    # Cr√©er et rendre l'interface
    layout = MainLayout(services)
    layout.render(
        on_message_send=lambda msg: asyncio.run(handle_message_send(msg)),
        on_file_upload=lambda file: asyncio.run(handle_file_upload(file)),
        on_tool_action=handle_tool_action
    )

if __name__ == "__main__":
    main()